// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "brdf.isph"
#include "optics.isph"

struct Conductor
{
  uniform BRDF base;
  vec3f R;          //!< Reflectivity coefficient
  vec3f eta;        //!< Real part of refraction index
  vec3f k;          //!< Imaginary part of refraction index
};

////////////////////////////////////////////////////////////////////////
// uniform Conductor 
inline vec3f uniform_Conductor__eval(const uniform BRDF* uniform _this, 
                      const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) {
  return make_vec3f(0.0f);
}

inline vec3f uniform_Conductor__sample(const uniform BRDF* uniform _this,
                        const vec3f &wo, 
                        const DifferentialGeometry &dg, 
                        Sample3f &wi, 
                        const vec2f &s)  
{
  const uniform Conductor* uniform this = (const uniform Conductor* uniform) _this;
  wi = reflect(wo,dg.Ns);
  return mul(this->R, fresnelConductor(dot(wo,dg.Ns),this->eta,this->k));
}

inline void Conductor__Constructor(uniform Conductor* uniform this,
                                   const uniform vec3f R, const uniform vec3f eta, const uniform vec3f k)
{
  BRDF__Constructor(&this->base,SPECULAR_REFLECTION,uniform_Conductor__eval,uniform_Conductor__sample);
  this->R = R;
  this->eta = eta;
  this->k = k;
}

////////////////////////////////////////////////////////////////////////
// varying Conductor
inline vec3f varying_Conductor__eval(const uniform BRDF* uniform _this, 
                      const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) {
  return make_vec3f(0.0f);
}

inline vec3f varying_Conductor__sample(const uniform BRDF* uniform _this,
                        const vec3f &wo, 
                        const DifferentialGeometry &dg, 
                        Sample3f &wi, 
                        const vec2f &s)  
{
  const varying Conductor* uniform this = (const varying Conductor* uniform) _this;
  wi = reflect(wo,dg.Ns);
  return mul(this->R, fresnelConductor(dot(wo,dg.Ns),this->eta,this->k));
}

inline void Conductor__Constructor(varying Conductor* uniform this,
                                   const varying vec3f R, const varying vec3f eta, const varying vec3f k)
{
  BRDF__Constructor(&this->base,SPECULAR_REFLECTION,varying_Conductor__eval,varying_Conductor__sample);
  this->R = R;
  this->eta = eta;
  this->k = k;
}