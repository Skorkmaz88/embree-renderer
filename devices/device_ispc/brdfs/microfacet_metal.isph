// ======================================================================== //
// Copyright 2009-2013 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "brdf.isph"

struct MicrofacetMetal
{
  uniform BRDF base;
  uniform FresnelConductor         fresnel;
  uniform PowerCosineDistribution  distribution;
  vec3f                    R;
};

////////////////////////////////////////////////////////////////////////
// uniform
inline vec3f uniform_MicrofacetMetal__eval(const uniform BRDF* uniform _this,
                                    const vec3f &wo, 
                                    const DifferentialGeometry &dg, 
                                    const vec3f &wi)
{
  const uniform MicrofacetMetal* uniform this = (const uniform MicrofacetMetal* uniform) _this;
  const float cosThetaO = dot(wo,dg.Ns);
  const float cosThetaI = dot(wi,dg.Ns);
  if (cosThetaI <= 0.0f | cosThetaO <= 0.0f) return make_vec3f(0.f);
  const vec3f wh = normalize(add(wi,wo));
  const float cosThetaH = dot(wh, dg.Ns);
  const float cosTheta = dot(wi, wh); // = dot(wo, wh);
  const vec3f F = eval(this->fresnel,cosTheta);
  const float D = eval(this->distribution,cosThetaH);
  const float G = min(1.0f, min(2.0f * cosThetaH * cosThetaO / cosTheta, 
                                  2.0f * cosThetaH * cosThetaI / cosTheta));
  return mul(mul(this->R, F), D * G * rcp(4.0f*cosThetaO));
}
  
inline vec3f uniform_MicrofacetMetal__sample(const uniform BRDF* uniform _this,
                                     const vec3f &wo, 
                                     const DifferentialGeometry &dg,
                                     Sample3f &wi,
                                     const vec2f &s)
{
  const uniform MicrofacetMetal* uniform this = (const uniform MicrofacetMetal* uniform) _this;
  if (dot(wo,dg.Ns) <= 0.0f) return make_vec3f(0.f);
  sample(this->distribution,wo,dg,wi,s);
  if (dot(wi.v,dg.Ns) <= 0.0f) return make_vec3f(0.f);
  return uniform_MicrofacetMetal__eval(_this,wo,dg,wi.v);
}

inline void MicrofacetMetal__Constructor(uniform MicrofacetMetal* uniform this,
                                         const uniform vec3f& R, 
                                         const uniform FresnelConductor& fresnel, 
                                         const uniform PowerCosineDistribution& distribution)
{
  BRDF__Constructor(&this->base,GLOSSY_REFLECTION,
                    uniform_MicrofacetMetal__eval,uniform_MicrofacetMetal__sample);
  this->R = R;
  this->fresnel = fresnel;
  this->distribution = distribution;
}

inline uniform MicrofacetMetal make_MicrofacetMetal(const uniform vec3f& R, 
                                                    const uniform FresnelConductor& fresnel, 
                                                    const uniform PowerCosineDistribution& distribution)
{
  uniform MicrofacetMetal v; MicrofacetMetal__Constructor(&v,R,fresnel,distribution); return v;
}
/**/
////////////////////////////////////////////////////////////////////////
// varying
inline vec3f varying_MicrofacetMetal__eval(const uniform BRDF* uniform _this,
                                    const vec3f &wo, 
                                    const DifferentialGeometry &dg, 
                                    const vec3f &wi)
{
  const varying MicrofacetMetal* uniform this = (const varying MicrofacetMetal* uniform) _this;
  const float cosThetaO = dot(wo,dg.Ns);
  const float cosThetaI = dot(wi,dg.Ns);
  if (cosThetaI <= 0.0f | cosThetaO <= 0.0f) return make_vec3f(0.f);
  const vec3f wh = normalize(add(wi,wo));
  const float cosThetaH = dot(wh, dg.Ns);
  const float cosTheta = dot(wi, wh); // = dot(wo, wh);
  const vec3f F = eval(this->fresnel,cosTheta);
  const float D = eval(this->distribution,cosThetaH);
  const float G = min(1.0f, min(2.0f * cosThetaH * cosThetaO / cosTheta, 
                                  2.0f * cosThetaH * cosThetaI / cosTheta));
  return mul(mul(this->R, F), D * G * rcp(4.0f*cosThetaO));
}
  
inline vec3f varying_MicrofacetMetal__sample(const uniform BRDF* uniform _this,
                                     const vec3f &wo, 
                                     const DifferentialGeometry &dg,
                                     Sample3f &wi,
                                     const vec2f &s)
{
  const varying MicrofacetMetal* uniform this = (const varying MicrofacetMetal* uniform) _this;
  if (dot(wo,dg.Ns) <= 0.0f) return make_vec3f(0.f);
  sample(this->distribution,wo,dg,wi,s);
  if (dot(wi.v,dg.Ns) <= 0.0f) return make_vec3f(0.f);
  return varying_MicrofacetMetal__eval(_this,wo,dg,wi.v);
}

inline void MicrofacetMetal__Constructor(varying MicrofacetMetal* uniform this,
                                         const varying vec3f& R, 
                                         const uniform FresnelConductor& fresnel, 
                                         const uniform PowerCosineDistribution& distribution)
{
  BRDF__Constructor(&this->base,GLOSSY_REFLECTION,
                    varying_MicrofacetMetal__eval,varying_MicrofacetMetal__sample);
  this->R = R;
  this->fresnel = fresnel;
  this->distribution = distribution;
}

inline varying MicrofacetMetal make_MicrofacetMetal(const varying vec3f& R, 
                                                    const uniform FresnelConductor& fresnel, 
                                                    const uniform PowerCosineDistribution& distribution)
{
  varying MicrofacetMetal v; MicrofacetMetal__Constructor(&v,R,fresnel,distribution); return v;
}
/**/